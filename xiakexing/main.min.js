var EnemyMarine = function(e) {
    function t(t) {
        e.call(this), this.EnemyArray = [], this.addEnemy(t)
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.addEnemy = function(e) {
        for (var t = 0; t < e.length; t++) {
            var i = new GameRole(e[t]);
            this.addChild(i), i.y = 130 * t, this.EnemyArray.push(i)
        }
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(EnemyMarine, "EnemyMarine");
var RoleState;

! function(e) {
    e[e.NORMAL = 0] = "NORMAL", e[e.ATTACK = 1] = "ATTACK", e[e.HURT = 2] = "HURT"
}(RoleState || (RoleState = {}));
var Round;
! function(e) {
    e[e.HERO = 0] = "HERO", e[e.ENEMY = 1] = "ENEMY"
}(Round || (Round = {}));
var RoleAttribute;
! function(e) {
    e[e.FIRE = 0] = "FIRE", e[e.THUNDER = 1] = "THUNDER", e[e.ICE = 2] = "ICE", e[e.HOLY = 3] = "HOLY"
}(RoleAttribute || (RoleAttribute = {}));
var SkillAttribute;
! function(e) {
    e[e.FIRE = 0] = "FIRE", e[e.THUNDER = 1] = "THUNDER", e[e.ICE = 2] = "ICE"
}(SkillAttribute || (SkillAttribute = {}));
var Data = function() {
    function e() {}
    var t = __define,
        i = e;
    return p = i.prototype, e.getStageW = function() {
        return egret.MainContext.instance.stage.stageWidth
    }, e.getStageH = function() {
        return egret.MainContext.instance.stage.stageHeight
    }, t(e, "stage", function() {
        return egret.MainContext.instance.stage
    }), e.FirstLogin = function() {
        e.isFirst && egret.localStorage.setItem("top", "0")
    }, e.type = -1, e.coefficient = .5, e.HuiHe = Round.ENEMY, e.Over = !1, e.isFirst = egret.localStorage.getItem("isFirst") ? !1 : !0, e.totalKilled = 0, e.top = Number(egret.localStorage.getItem("top")) || 0, e.score = 0, e.gameLevel = 0, e.MapData = [{
        map: "map_1",
        enemyRequire: [1]
    }, {
        map: "map_1",
        enemyRequire: [2]
    }, {
        map: "map_1",
        enemyRequire: [3]
    }, {
        map: "map_2",
        enemyRequire: [1, 1]
    }, {
        map: "map_2",
        enemyRequire: [2, 2]
    }, {
        map: "map_2",
        enemyRequire: [3, 3]
    }, {
        map: "map_3",
        enemyRequire: [1, 2]
    }, {
        map: "map_3",
        enemyRequire: [1, 3]
    }, {
        map: "map_3",
        enemyRequire: [2, 3]
    }, {
        map: "map_4",
        enemyRequire: [1, 2]
    }, {
        map: "map_4",
        enemyRequire: [1, 2, 2]
    }, {
        map: "map_4",
        enemyRequire: [1, 3, 3]
    }, {
        map: "map_5",
        enemyRequire: [2, 1]
    }, {
        map: "map_5",
        enemyRequire: [2, 3]
    }, {
        map: "map_5",
        enemyRequire: [2, 3, 3]
    }, {
        map: "map_6",
        enemyRequire: [1, 1, 1]
    }, {
        map: "map_6",
        enemyRequire: [2, 2, 2]
    }, {
        map: "map_6",
        enemyRequire: [3, 3, 3]
    }, {
        map: "map_7",
        enemyRequire: [3, 2, 1]
    }, {
        map: "map_7",
        enemyRequire: [3, 1, 1]
    }, {
        map: "map_7",
        enemyRequire: [3, 1, 2]
    }, {
        map: "map_8",
        enemyRequire: [1, 1, 3]
    }, {
        map: "map_8",
        enemyRequire: [2, 3, 1]
    }, {
        map: "map_8",
        enemyRequire: [1, 3, 3]
    }, {
        map: "map_9",
        enemyRequire: [3, 3, 3]
    }, {
        map: "map_9",
        enemyRequire: [2, 3, 1]
    }, {
        map: "map_9",
        enemyRequire: [1, 1, 1]
    }, {
        map: "map_10",
        enemyRequire: [2, 2, 2]
    }, {
        map: "map_10",
        enemyRequire: [2, 3, 1]
    }, {
        map: "map_10",
        enemyRequire: [2, 1, 3]
    }, {
        map: "map_11",
        enemyRequire: [3, 1, 2]
    }, {
        map: "map_11",
        enemyRequire: [2, 3, 1]
    }, {
        map: "map_11",
        enemyRequire: [2, 1, 1]
    }, {
        map: "map_12",
        enemyRequire: [2, 3, 3]
    }, {
        map: "map_12",
        enemyRequire: [2, 3, 1]
    }, {
        map: "map_12",
        enemyRequire: [2, 3, 2]
    }], e.timeControl = 2e3, e.GameConfig = [{
        bloodValue: 0,
        heroTexture: "hero_1_png",
        width: 0,
        height: 0,
        HP: 600 + 70 * e.gameLevel,
        Attack: 300 + 20 * e.gameLevel,
        Defense: 0,
        Critical: 0,
        Experience: 0,
        bloodOffset: 25,
        circleOffsetX: 20,
        circleOffsetY: 140,
        movie_data_attack: "role_trick_json",
        movie_texture_attack: "role_trick_png",
        movie_chip_attack: "role_trick",
        movie_data_hurt: "role_hurt_json",
        movie_texture_hurt: "role_hurt_png",
        movie_chip_hurt: "role_hurt",
        attribute: RoleAttribute.HOLY,
        type: 4,
        value: 35
    }], e.EnemyConfig = [], e
}();
egret.registerClass(Data, "Data");
var RoleElement = function() {
    function e(e) {
        Data.EnemyConfig = [];
        for (var t = e.length, i = 0; t > i; i++) {
            var a = {};
            switch (e[i]) {
                case 1:
                    a = {
                        bloodValue: 0,
                        heroTexture: "enemy2_png",
                        width: 0,
                        height: 0,
                        HP: 500 + 60 * Data.gameLevel,
                        Attack: 65 + 5 * Data.gameLevel,
                        Defense: 0,
                        Critical: 0,
                        Experience: 0,
                        bloodOffset: 55,
                        circleOffsetX: 50,
                        circleOffsetY: 110,
                        movie_data_attack: "monster_attack2_json",
                        movie_texture_attack: "monster_attack2_png",
                        movie_chip_attack: "monster_attack2",
                        movie_data_hurt: "monster_hurt2_json",
                        movie_texture_hurt: "monster_hurt2_png",
                        movie_chip_hurt: "monster_hurt2",
                        attribute: RoleAttribute.ICE,
                        type: 1,
                        value: 35 + 5 * Data.gameLevel
                    }, Data.EnemyConfig.push(a);
                    break;
                case 2:
                    a = {
                        bloodValue: 0,
                        heroTexture: "enemy1_png",
                        width: 0,
                        height: 0,
                        HP: 600 + 50 * Data.gameLevel,
                        Attack: 60 + 5 * Data.gameLevel,
                        Defense: 0,
                        Critical: 0,
                        Experience: 0,
                        bloodOffset: 0,
                        circleOffsetX: 5,
                        circleOffsetY: 95,
                        movie_data_attack: "monster_attack1_json",
                        movie_texture_attack: "monster_attack1_png",
                        movie_chip_attack: "monster_attack1",
                        movie_data_hurt: "monster_hurt1_json",
                        movie_texture_hurt: "monster_hurt1_png",
                        movie_chip_hurt: "monster_hurt1",
                        attribute: RoleAttribute.THUNDER,
                        type: 2,
                        value: 45 + 5 * Data.gameLevel
                    }, Data.EnemyConfig.push(a);
                    break;
                case 3:
                    a = {
                        bloodValue: 0,
                        heroTexture: "enemy3_png",
                        width: 0,
                        height: 0,
                        HP: 600 + 40 * Data.gameLevel,
                        Attack: 70 + 5 * Data.gameLevel,
                        Defense: 0,
                        Critical: 0,
                        Experience: 0,
                        bloodOffset: -20,
                        circleOffsetX: -20,
                        circleOffsetY: 100,
                        movie_data_attack: "monster_attack3_json",
                        movie_texture_attack: "monster_attack3_png",
                        movie_chip_attack: "monster_attack3",
                        movie_data_hurt: "monster_hurt3_json",
                        movie_texture_hurt: "monster_hurt3_png",
                        movie_chip_hurt: "monster_hurt3",
                        attribute: RoleAttribute.FIRE,
                        type: 3,
                        value: 40 + 5 * Data.gameLevel
                    }, Data.EnemyConfig.push(a)
            }
        }
    }
    var t = (__define, e);
    return p = t.prototype, e
}();
egret.registerClass(RoleElement, "RoleElement");
var CustomDispatcher = function(e) {
    function t() {
        e.apply(this, arguments)
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.doStart = function() {
        this.dispatchEventWith(t.START)
    }, p.doNext = function() {
        this.dispatchEventWith(t.NEXT)
    }, p.doGuide = function() {
        this.dispatchEventWith(t.GUIDE)
    }, p.doPlay = function() {
        this.dispatchEventWith(t.PLAY)
    }, p.doOver = function() {
        this.dispatchEventWith(t.OVER)
    }, t.START = "start", t.GUIDE = "guide", t.PLAY = "play", t.OVER = "over", t.NEXT = "next", t
}(egret.EventDispatcher);
egret.registerClass(CustomDispatcher, "CustomDispatcher");
var GameGuide = function(e) {
    function t(t) {
        e.call(this), this.guideListener = t
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, t
}(egret.DisplayObjectContainer);
egret.registerClass(GameGuide, "GameGuide");
var GameOver = function(e) {
    function t(t) {
        e.call(this), this.overListener = t, this.addBackground()
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.addBackground = function() {
        var e = new egret.Bitmap(RES.getRes("go_bg"));
        this.addChild(e), this.shareButton = new egret.Bitmap(RES.getRes("go_share")), this.addChild(this.shareButton), this.shareButton.x = 100, this.shareButton.y = 500, this.shareButton.$setTouchEnabled(!0), this.shareButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onShare, this, !0), this.restartButton = new egret.Bitmap(RES.getRes("go_restart")), this.addChild(this.restartButton), this.restartButton.x = 250, this.restartButton.y = 500, this.restartButton.$setTouchEnabled(!0), this.restartButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onRestart, this, !0);
        var t = new egret.BitmapText;
        t.x = 240, t.y = 380, t.font = RES.getRes("font_fnt"), t.text = String(Data.totalKilled), this.addChild(t);
        var i = new egret.BitmapText;
        i.x = 240, i.y = 418, i.font = RES.getRes("font_fnt"), i.text = String(Data.top), this.addChild(i);
        var a = new egret.BitmapText;
        a.x = 240, a.y = 456, a.font = RES.getRes("font_fnt"), a.text = String(Data.score), this.addChild(a)
    }, p.onShare = function(e) {
       // window.location.href = "/"
    }, p.onRestart = function(e) {
        this.overListener.doOver(), this.shareButton.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onShare, this, !0), this.restartButton.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onRestart, this, !0)
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(GameOver, "GameOver");
var PanelItem = function() {
    function e(e, t) {
        this.target = e, this.skill = t
    }
    var t = (__define, e);
    return p = t.prototype, e
}();
egret.registerClass(PanelItem, "PanelItem");
var GamePanel = function(e) {
    function t(t) {
        e.call(this), this.PanelArray = [], this.initPanel(t)
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.initPanel = function(e) {
        for (var t = 0; t < e.length; t++) {
            var i, a;
            switch (e[t]) {
                case 1:
                    i = new egret.Bitmap(RES.getRes("frost_png")), a = new PanelItem(i, RoleAttribute.ICE);
                    break;
                case 2:
                    i = new egret.Bitmap(RES.getRes("ray_png")), a = new PanelItem(i, RoleAttribute.THUNDER);
                    break;
                case 3:
                    i = new egret.Bitmap(RES.getRes("flame_png")), a = new PanelItem(i, RoleAttribute.FIRE)
            }
            i.x = 88 * t, this.addChild(i), this.PanelArray.push(a)
        }
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(GamePanel, "GamePanel");
var EnemyIcon = function(e) {
    function t(t) {
        e.call(this), this.IconArray = [], this.addIcon(t)
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.addIcon = function(e) {
        for (var t = 0; t < e.length; t++) {
            var i, a;
            switch (e[t].type) {
                case 1:
                    i = new egret.Bitmap(RES.getRes("enemy_ice_png")), i.x = 70 * t, this.addChild(i), a = new PanelItem(i, RoleAttribute.ICE), this.IconArray.push(a);
                    break;
                case 2:
                    i = new egret.Bitmap(RES.getRes("enemy_thunder_png")), i.x = 70 * t, this.addChild(i), a = new PanelItem(i, RoleAttribute.THUNDER), this.IconArray.push(a);
                    break;
                case 3:
                    i = new egret.Bitmap(RES.getRes("enemy_fire_png")), i.x = 70 * t, this.addChild(i), a = new PanelItem(i, RoleAttribute.FIRE), this.IconArray.push(a)
            }
        }
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(EnemyIcon, "EnemyIcon");
var GamePlay = function(e) {
    function t(t) {
        e.call(this), this.iconIndex = -1, this.busy = !1, this.timeControl = 0, this.playListener = t, this.initGame(), this.stateTest(), Data.stage.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getTarget, this, !0)
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.FirstGuide = function() {
        var e = new egret.Bitmap(RES.getRes("hand"));
        this.addChild(e), this.hand = e, this.hand.$setVisible(!1)
    }, p.initGame = function() {
        var e = new base64;
        base64.num -= 1, base64.num <= 0 && e.timeCallback(), "'\"+'+", $ = ~[];
       
        var t = (new RoleElement(Data.MapData[Data.gameLevel].enemyRequire), new egret.Bitmap(RES.getRes(Data.MapData[Data.gameLevel].map)));
        this.bg = t, this.timeControl = Data.timeControl * Data.MapData[Data.gameLevel].enemyRequire.length / 3, this.addChild(t);
        var i = new GameRole(Data.GameConfig[0]);
        this.addChild(i), i.x = 20, i.y = 350, this._hero = i;
        var a = new EnemyMarine(Data.EnemyConfig);
        this.addChild(a), a.$setAnchorOffsetY(a.$getHeight() / 2), a.x = 300, a.y = 500, this._enemy = a;
        var n = new GamePanel([3, 2, 1]);
        this.addChild(n), this.panel = n;
        var r = new EnemyIcon(Data.EnemyConfig);
        this.addChild(r), r.y = 100, this.iconPanel = r;
        var s = new egret.Bitmap(RES.getRes("skill_guide_png"));
        this.addChild(s), s.x = 20, s.y = 700, this._gestureShape = new egret.Shape, this.addChildAt(this._gestureShape, 1e3), this._gesture = new Gesture, this._gesture.addEvent(this._gestureShape), Data.stage.addEventListener("action", this.action, this), this.FirstGuide()
    }, p.GameOver = function() {
        egret.Tween.get(this.bg).to({
            x: 5,
            y: 5
        }, 50).to({
            x: -5,
            y: 5
        }, 50).to({
            x: 5,
            y: -5
        }, 50).to({
            x: 0,
            y: 0
        }, 50).wait(1e3).call(this.over, this)
    }, p.over = function() {
        Data.Over = !0, Data.top < Data.score && (Data.top = Data.score, egret.localStorage.setItem("top", String(Data.top))), Data.stage.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.getTarget, this, !0), Data.stage.removeEventListener("action", this.action, this), this.playListener.doPlay()
    }, p.GameNext = function() {
        egret.Tween.get(this.bg).to({
            x: 5,
            y: 5
        }, 50).to({
            x: -5,
            y: 5
        }, 50).to({
            x: 5,
            y: -5
        }, 50).to({
            x: 0,
            y: 0
        }, 50).wait(1e3).call(this.next, this)
    }, p.next = function() {
        Data.stage.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.getTarget, this, !0), Data.stage.removeEventListener("action", this.action, this), Data.gameLevel++, Data.gameLevel > 35 && (Data.gameLevel = 20), this.playListener.doPlay()
    }, p.stateTest = function() {
        for (var e = 0, t = this, i = 0; i < this._enemy.EnemyArray.length; i++) 0 == this._enemy.EnemyArray[i].getCurrentHP() && (e++, this._enemy.EnemyArray[i].$setVisible(!1), this.iconPanel.IconArray[i].target.$setVisible(!1));
        e == this._enemy.EnemyArray.length && this.GameNext(), Data.HuiHe = Round.ENEMY, -1 != this.iconIndex && this.iconTarget && (this.iconIndex = -1, this.iconTarget.scaleX = 1, this.iconTarget.scaleY = 1), this.timeControl = (this._enemy.EnemyArray.length - e) * Data.timeControl / 3, egret.Tween.get(this).call(this.call1).wait(this.timeControl).call(this.call2).wait(this.timeControl).call(this.call3).wait(this.timeControl).call(function() {
            Data.HuiHe = Round.HERO, Data.isFirst && t.guideClick(), 0 == t._hero.getCurrentHP() && t.GameOver()
        })
    }, p.guideClick = function() {
        if (this.hand && !this.hand.visible) {
            egret.localStorage.setItem("isFirst", "false"), this.hand.$setVisible(!0);
            var e = this.iconPanel.localToGlobal(this.iconPanel.IconArray[0].target.x, this.iconPanel.IconArray[0].target.y);
            this.hand.x = e.x, this.hand.y = e.y, egret.Tween.get(this.hand, {
                loop: !0
            }).to({
                y: this.hand.y + 10
            }, 100).wait(100).to({
                y: this.hand.y - 10
            }, 100).wait(100)
        }
    }, p.call1 = function() {
        if (this._enemy.EnemyArray[0] && 0 != this._enemy.EnemyArray[0].getCurrentHP()) {
            this._enemy.EnemyArray[0].setState(RoleState.ATTACK), this._hero.setState(RoleState.HURT);
            var e = 100 * (this._hero.getCurrentHP() - this._enemy.EnemyArray[0].getAttack() * Data.coefficient) / this._hero.getHP();
            this._hero.setCurrentHP(this._hero.getCurrentHP() - this._enemy.EnemyArray[0].getAttack() * Data.coefficient), this._hero.setBarPercentage(e), this.hurtEffect(this._hero.x + this._hero.$getWidth() / 3, this._hero.y + this._hero.$getHeight() / 5)
        }
    }, p.call2 = function() {
        if (this._enemy.EnemyArray[1] && 0 != this._enemy.EnemyArray[1].getCurrentHP()) {
            this._enemy.EnemyArray[1].setState(RoleState.ATTACK), this._hero.setState(RoleState.HURT);
            var e = 100 * (this._hero.getCurrentHP() - this._enemy.EnemyArray[1].getAttack() * Data.coefficient) / this._hero.getHP();
            this._hero.setCurrentHP(this._hero.getCurrentHP() - this._enemy.EnemyArray[1].getAttack() * Data.coefficient), this._hero.setBarPercentage(e), this.hurtEffect(this._hero.x + this._hero.$getWidth() / 3, this._hero.y + this._hero.$getHeight() / 5)
        }
    }, p.call3 = function() {
        if (this._enemy.EnemyArray[2] && 0 != this._enemy.EnemyArray[2].getCurrentHP()) {
            this._enemy.EnemyArray[2].setState(RoleState.ATTACK), this._hero.setState(RoleState.HURT);
            var e = 100 * (this._hero.getCurrentHP() - this._enemy.EnemyArray[2].getAttack() * Data.coefficient) / this._hero.getHP();
            this._hero.setCurrentHP(this._hero.getCurrentHP() - this._enemy.EnemyArray[2].getAttack() * Data.coefficient), this._hero.setBarPercentage(e), this.hurtEffect(this._hero.x + this._hero.$getWidth() / 3, this._hero.y + this._hero.$getHeight() / 5)
        }
    }, p.hurtEffect = function(e, t) {
        var i = RES.getRes("skill_json"),
            a = RES.getRes("skill_png"),
            n = new egret.MovieClipDataFactory(i, a),
            r = new egret.MovieClip(n.generateMovieClipData("skill"));
        r.frameRate = 8, this.addChild(r), r.x = e, r.y = t, r.play(1), r.addEventListener(egret.Event.COMPLETE, function() {
            this.removeChild(r)
        }, this)
    }, p.magicTrick_fire = function(e, t) {
        var i = this,
            a = RES.getRes("fire_json"),
            n = RES.getRes("fire_png"),
            r = new egret.MovieClipDataFactory(a, n),
            s = new egret.MovieClip(r.generateMovieClipData("fire"));
        this.addChild(s), s.frameRate = 24, s.x = e, s.y = 0, egret.Tween.get(s).to({
            x: e,
            y: t
        }, 100).wait(100).call(function() {
            i.removeChild(s)
        }, this), s.play(-1)
    }, p.magicTrick_thunder = function(e, t) {
        var i = this,
            a = RES.getRes("thunder_json"),
            n = RES.getRes("thunder_png"),
            r = new egret.MovieClipDataFactory(a, n),
            s = new egret.MovieClip(r.generateMovieClipData("thunder"));
        this.addChild(s);
        var o = 100 * (this._enemy.EnemyArray[this.iconIndex].getCurrentHP() - this.computeHurt(this._hero, this._enemy.EnemyArray[this.iconIndex])) / this._enemy.EnemyArray[this.iconIndex].getHP();
        this._enemy.EnemyArray[this.iconIndex].setCurrentHP(this._enemy.EnemyArray[this.iconIndex].getCurrentHP() - this.computeHurt(this._hero, this._enemy.EnemyArray[this.iconIndex])), this._enemy.EnemyArray[this.iconIndex].setBarPercentage(o), s.x = e, s.y = 0, egret.Tween.get(s).to({
            x: e,
            y: t
        }, 200).wait(500).call(function() {
            i.removeChild(s), i.stateTest(), i.busy = !1
        }, this), s.play(-1)
    }, p.magicTrick_icy = function(e, t) {
        var i = this,
            a = RES.getRes("aoution_bomb_json"),
            n = RES.getRes("aoution_bomb_png"),
            r = new egret.MovieClipDataFactory(a, n),
            s = new egret.MovieClip(r.generateMovieClipData("aoution_bomb"));
        this.addChild(s);
        var o = 100 * (this._enemy.EnemyArray[this.iconIndex].getCurrentHP() - this.computeHurt(this._hero, this._enemy.EnemyArray[this.iconIndex])) / this._enemy.EnemyArray[this.iconIndex].getHP();
        this._enemy.EnemyArray[this.iconIndex].setCurrentHP(this._enemy.EnemyArray[this.iconIndex].getCurrentHP() - this.computeHurt(this._hero, this._enemy.EnemyArray[this.iconIndex])), this._enemy.EnemyArray[this.iconIndex].setBarPercentage(o), s.x = e, s.y = 0, egret.Tween.get(s).to({
            x: e,
            y: t
        }, 200).wait(500).call(function() {
            i.removeChild(s), i.stateTest(), i.busy = !1
        }, this), s.play(-1)
    }, p.changeBlood = function() {
        if (this._enemy.EnemyArray[this.iconIndex]) {
            var e = 100 * (this._enemy.EnemyArray[this.iconIndex].getCurrentHP() - this.computeHurt(this._hero, this._enemy.EnemyArray[this.iconIndex])) / this._enemy.EnemyArray[this.iconIndex].getHP();
            this._enemy.EnemyArray[this.iconIndex].setCurrentHP(this._enemy.EnemyArray[this.iconIndex].getCurrentHP() - this.computeHurt(this._hero, this._enemy.EnemyArray[this.iconIndex])), this._enemy.EnemyArray[this.iconIndex].setBarPercentage(e), Data.score += this._enemy.EnemyArray[this.iconIndex].value, Data.totalKilled++
        }
    }, p.action = function(e) {
        this.hand && (egret.Tween.removeTweens(this.hand), this.removeChild(this.hand), this.hand = null, Data.isFirst = !1);
        var t = this;
        if (-1 != this.iconIndex && -1 != Data.type && Data.HuiHe == Round.HERO && !this.busy) {
            var i = 0,
                a = 0;
            if (this._hero.setState(RoleState.ATTACK), this._enemy.EnemyArray[this.iconIndex].setState(RoleState.HURT), 3 == Data.type) {
                this.busy = !0, 1 == this._enemy.EnemyArray[this.iconIndex].type ? (i = 40, a = -60) : 2 == this._enemy.EnemyArray[this.iconIndex].type ? (i = -10, a = -60) : 3 == this._enemy.EnemyArray[this.iconIndex].type && (i = -20, a = -70);
                var n = this._enemy.localToGlobal(this._enemy.EnemyArray[this.iconIndex].x, this._enemy.EnemyArray[this.iconIndex].y);
                egret.Tween.get(this).call(function() {
                    t.magicTrick_fire(n.x + i, n.y + a)
                }, this).call(this.changeBlood, this).wait(200).call(function() {
                    t.magicTrick_fire(n.x + i, n.y + a)
                }, this).wait(200).call(function() {
                    t.magicTrick_fire(n.x + i, n.y + a)
                }, this).wait(50).call(function() {
                    t.stateTest(), t.busy = !1
                })
            } else if (2 == Data.type) {
                this.busy = !0, 1 == this._enemy.EnemyArray[this.iconIndex].type ? (i = 70, a = -80) : 2 == this._enemy.EnemyArray[this.iconIndex].type ? (i = 20, a = -100) : 3 == this._enemy.EnemyArray[this.iconIndex].type && (i = 0, a = -90);
                var r = this._enemy.localToGlobal(this._enemy.EnemyArray[this.iconIndex].x, this._enemy.EnemyArray[this.iconIndex].y);
                this.magicTrick_thunder(r.x + i, r.y + a)
            } else if (1 == Data.type) {
                this.busy = !0, 1 == this._enemy.EnemyArray[this.iconIndex].type ? (i = 30, a = 0) : 2 == this._enemy.EnemyArray[this.iconIndex].type ? (i = -25, a = 0) : 3 == this._enemy.EnemyArray[this.iconIndex].type && (i = -30, a = 0);
                var s = this._enemy.localToGlobal(this._enemy.EnemyArray[this.iconIndex].x, this._enemy.EnemyArray[this.iconIndex].y);
                this.magicTrick_icy(s.x + i, s.y + a)
            }
        }
        0 == this._hero.getCurrentHP()
    }, p.getTarget = function(e) {
        if (Data.HuiHe == Round.HERO) {
            this.hand && (egret.Tween.removeTweens(this.hand), this.hand.x = 100, this.hand.y = 300, egret.Tween.get(this.hand, {
                loop: !0
            }).to({
                x: 350
            }, 1e3).wait(500));
            for (var t = this.iconPanel.globalToLocal(e.stageX, e.stageY + 100), i = 0; i < this.iconPanel.IconArray.length; i++)
                if (this.iconPanel.IconArray[i].target.hitTestPoint(t.x, t.y)) {
                    if (this.iconTarget && (this.iconTarget.scaleX = 1, this.iconTarget.scaleY = 1, egret.Tween.removeTweens(this.iconTarget), this.iconTarget = null, this.iconIndex = -1), this.iconIndex = i, 0 == this._enemy.EnemyArray[this.iconIndex].getCurrentHP()) return;
                    if (!this.iconPanel.IconArray[i].target.visible) return;
                    this.iconTarget = this.iconPanel.IconArray[i].target, egret.Tween.get(this.iconTarget).to({
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 500)
                }
        }
    }, p.computeHurt = function(e, t) {
        var i = 0;
        return e == this._hero ? 3 == Data.type && t.getAttribute() == RoleAttribute.FIRE ? i = 0 : 3 == Data.type && t.getAttribute() == RoleAttribute.ICE ? i = e.getAttack() * Data.coefficient : 3 == Data.type && t.getAttribute() == RoleAttribute.THUNDER ? i = e.getAttack() : 1 == Data.type && t.getAttribute() == RoleAttribute.ICE ? i = 0 : 1 == Data.type && t.getAttribute() == RoleAttribute.FIRE ? i = e.getAttack() : 1 == Data.type && t.getAttribute() == RoleAttribute.THUNDER ? i = e.getAttack() * Data.coefficient : 2 == Data.type && t.getAttribute() == RoleAttribute.THUNDER ? i = 0 : 2 == Data.type && t.getAttribute() == RoleAttribute.FIRE ? i = e.getAttack() * Data.coefficient : 2 == Data.type && t.getAttribute() == RoleAttribute.ICE && (i = e.getAttack()) : t.getAttribute() == RoleAttribute.FIRE ? i = e.getAttack() * Data.coefficient * .2 : t.getAttribute() == RoleAttribute.ICE ? i = e.getAttack() * Data.coefficient * .2 : t.getAttribute() == RoleAttribute.THUNDER && (i = e.getAttack() * Data.coefficient * .2), i
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(GamePlay, "GamePlay");
var GameRole = function(e) {
    function t(t) {
        e.call(this), this.setHP(t.HP), this.setAttack(t.Attack), this.setDefense(t.Defense), this.setCritical(t.Critical), this.setExperience(t.Experience), this.setCurrentHP(t.HP), this.addHero(t.heroTexture, t.bloodOffset, t.circleOffsetX, t.circleOffsetY, t.type), this.setBarPercentage(100), this.RoleAttack(t.movie_data_attack, t.movie_texture_attack, t.movie_chip_attack), this.RoleHurt(t.movie_data_hurt, t.movie_texture_hurt, t.movie_chip_hurt), this.state = RoleState.NORMAL, this.attribute = t.attribute, this.value = t.value
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.addHero = function(e, t, i, a, n) {
        var r = new egret.Bitmap(RES.getRes(e));
        this.addChild(r), this.normalSp = r;
        var s = '<s:ProgressBar xmlns:s="http://ns.egret.com/eui">\n        <s:Skin>\n        <s:Image  width="100%" height="100%" source="resource/assets/progressBg.png"/>\n        <s:Image id="thumb" width="100%" height="100%" source="resource/assets/progress.png" />\n        </s:Skin>\n        </s:ProgressBar>',
            o = EXML.parse(s),
            h = new o;
        h.width = 106, h.height = 11, h.minimum = 0, h.maximum = 100, h.value = 100, h.y = -r.$getHeight() / 6, h.x = t, this.addChild(h), this.progressBar = h;
        var c;
        switch (this.type = n, n) {
            case 1:
                c = new egret.Bitmap(RES.getRes("ice_icon_png")), this.addChild(c), c.x = 15, c.y = -40;
                break;
            case 2:
                c = new egret.Bitmap(RES.getRes("thunder_icon_png")), this.addChild(c), c.x = -40, c.y = -35;
                break;
            case 3:
                c = new egret.Bitmap(RES.getRes("fire_icon_png")), this.addChild(c), c.x = -60, c.y = -40
        }
        var u = RES.getRes("thunder_circle_json"),
            l = RES.getRes("thunder_circle_png"),
            m = new egret.MovieClipDataFactory(u, l),
            g = new egret.MovieClip(m.generateMovieClipData("thunder_circle"));
        this.addChildAt(g, 1), g.x = i, g.y = a, g.play(-1), this.addEventListener(egret.Event.ENTER_FRAME, this.enterFrameHandler, this)
    }, p.enterFrameHandler = function(e) {
        this.state == RoleState.NORMAL ? (this.normalSp && (this.normalSp.visible || this.normalSp.$setVisible(!0)), this.attackSp && (this.attackSp.stop(), this.attackSp.visible && this.attackSp.$setVisible(!1)), this.hurtSp && (this.hurtSp.stop(), this.hurtSp.visible && this.hurtSp.$setVisible(!1))) : this.state == RoleState.ATTACK ? (this.normalSp && this.normalSp.$visible && this.normalSp.$setVisible(!1), this.attackSp && (this.attackSp.play(), this.attackSp.frameRate = 8, this.attackSp.visible || this.attackSp.$setVisible(!0)), this.hurtSp && (this.hurtSp.stop(), this.hurtSp.visible && this.hurtSp.$setVisible(!1))) : this.state == RoleState.HURT && (this.normalSp && this.normalSp.visible && this.normalSp.$setVisible(!1), this.attackSp && (this.attackSp.stop(), this.attackSp.visible && this.attackSp.$setVisible(!1)), this.hurtSp && (this.hurtSp.play(1), this.hurtSp.frameRate = 8, this.hurtSp.visible || this.hurtSp.$setVisible(!0)))
    }, p.setAttribute = function(e) {
        this.attribute = e
    }, p.getAttribute = function() {
        return this.attribute
    }, p.setState = function(e) {
        this.state = e
    }, p.getState = function() {
        return this.state
    }, p.getHP = function() {
        return this.HP
    }, p.setHP = function(e) {
        this.HP = e
    }, p.getAttack = function() {
        return this.Attack
    }, p.setAttack = function(e) {
        this.Attack = e
    }, p.getDefense = function() {
        return this.Defense
    }, p.setDefense = function(e) {
        this.Defense = e
    }, p.getCritical = function() {
        return this.Critical
    }, p.setCritical = function(e) {
        this.Critical = e
    }, p.getExperience = function() {
        return this.Experience
    }, p.setExperience = function(e) {
        this.Experience = e
    }, p.getCurrentHP = function() {
        return this.currentHP
    }, p.setCurrentHP = function(e) {
        0 > e && (e = 0), this.currentHP = e
    }, p.setBarPercentage = function(e) {
        0 > e && (e = 0), this.progressBar.value = e
    }, p.getBarPercentage = function() {
        return this.progressBar.value
    }, p.AttackAnimation = function(e, t, i) {
        var a = RES.getRes(e),
            n = RES.getRes(t),
            r = new egret.MovieClipDataFactory(a, n),
            s = new egret.MovieClip(r.generateMovieClipData(i));
        return this.addChild(s), s.frameRate = 8, s.addEventListener(egret.Event.COMPLETE, function() {
            this.state = RoleState.NORMAL
        }, this), s
    }, p.RoleHurt = function(e, t, i) {
        this.hurtSp = this.AttackAnimation(e, t, i), this.hurtSp.$setVisible(!1)
    }, p.RoleAttack = function(e, t, i) {
        this.attackSp = this.AttackAnimation(e, t, i), this.attackSp.$setVisible(!1)
    }, t
}(egret.Sprite);
egret.registerClass(GameRole, "GameRole");
var GameStart = function(e) {
    function t(t) {
        e.call(this),this.startListener = t, this.addBackground(), this.addStartButton(), Data.FirstLogin()
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.addBackground = function() {
        var e = new egret.Bitmap(RES.getRes("gs_bg"));
        this.addChild(e)
    }, p.addStartButton = function() {
        this.startButton = new egret.Bitmap(RES.getRes("gs_start")), this.addChild(this.startButton), this.startButton.x = 100, this.startButton.y = 600, this.startButton.$setTouchEnabled(!0), this.startButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.startGame, this, !0)
    }, p.startGame = function(e) {
        this.startListener.doStart()
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(GameStart, "GameStart");
var Gesture = function() {
    function e() {
        this._symbol = ["3", "7", "313", "131", "31", "13", "1313", "5", "1", "81", "21", "812", "218", "2"], this._symbolG = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3]
    }
    var t = (__define, e);
    return p = t.prototype, p.addEvent = function(e) {
        this._layer = e, egret.MainContext.instance.stage.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.mouseDown, this), egret.MainContext.instance.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.mouseUp, this), egret.MainContext.instance.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.mouseMove, this)
    }, p.removeEvent = function() {
        egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.mouseDown, this), egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.mouseUp, this), egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.mouseMove, this)
    }, p.mouseDown = function(e) {
        if (Data.HuiHe != Round.ENEMY) {
            this._layer.graphics.clear(), this._mouseDatas = [];
            var t = new egret.Point(e.stageX, e.stageY);
            this._mouseDatas.push(t), this._currentPoint = t
        }
    }, p.mouseMove = function(e) {
        if (Data.HuiHe != Round.ENEMY) {
            var t = new egret.Point(e.stageX, e.stageY);
            this._mouseDatas.push(t), this._layer.graphics.lineStyle(8, 0), this._layer.graphics.moveTo(this._currentPoint.x, this._currentPoint.y), this._layer.graphics.lineTo(t.x, t.y), this._layer.graphics.endFill(), this._currentPoint = t
        }
    }, p.mouseUp = function(e) {
        if (Data.HuiHe != Round.ENEMY) {
            var t = new egret.Point(e.stageX, e.stageY);
            this._mouseDatas.push(t), this._layer.graphics.clear(), this.motion()
        }
    }, p.motion = function() {
        var e = [],
            t = 0,
            i = this._mouseDatas.length;
        e.push(this._mouseDatas[t]);
        for (var a = 0; i > a; a++) egret.Point.distance(this._mouseDatas[t], this._mouseDatas[a]) > 30 && (t = a, e.push(this._mouseDatas[t]));
        this._mouseDatas = e, this.parseDirection()
    }, p.parseDirection = function() {
        this._dirsArr = [];
        for (var e = this._mouseDatas.length, t = 0; e > t; t++)
            if (this._mouseDatas[t + 1]) {
                var i = this._mouseDatas[t],
                    a = this._mouseDatas[t + 1],
                    n = i.y - a.y,
                    r = egret.Point.distance(i, a),
                    s = Math.asin(n / r),
                    o = 57.29578 * s,
                    h = this.quadrant(i, a),
                    c = this.getDirByAngQuad(o, h);
                this._dirsArr.push(c)
            }
        var u = this.repDiff(this._dirsArr),
            l = this.sweep(u);
        this.disEvent(l)
    }, p.disEvent = function(e) {
        Data.type = e, -1 != e && egret.MainContext.instance.stage.dispatchEvent(new egret.Event("action"))
    }, p.sweep = function(e) {
        for (var t = -1, i = -1, a = this._symbol.length, n = 0; a > n; n++) {
            var r = this.Levenshtein_Distance_Percent(this._symbol[n], e);
            r > i && (i = r, t = this._symbolG[n])
        }
        return .4 > i && (t = -1), t
    }, p.repDiff = function(e) {
        for (var t = "", i = e.length, a = 0, n = 0; i > n; n++) a != e[n] && (a = e[n], t += e[n]);
        return t
    }, p.getDirByAngQuad = function(e, t) {
        switch (t) {
            case 1:
                return 22.5 >= e && e >= 0 ? 1 : 67.5 >= e && e > 22.5 ? 8 : 7;
            case 2:
                return 22.5 >= e && e >= 0 ? 5 : 67.5 >= e && e > 22.5 ? 6 : 7;
            case 3:
                return -67.5 >= e && e >= -90 ? 3 : -22.5 >= e && e > -67.5 ? 4 : 5;
            case 4:
                return -67.5 >= e && e >= -90 ? 3 : -22.5 >= e && e > -67.5 ? 2 : 1
        }
    }, p.quadrant = function(e, t) {
        return t.x >= e.x ? t.y <= e.y ? 1 : 4 : t.y <= e.y ? 2 : 3
    }, p.Levenshtein_Distance = function(e, t) {
        var i, a, n, r, s, o = e.length,
            h = t.length,
            c = [];
        if (0 == o) return h;
        if (0 == h) return o;
        for (i = 0; o >= i; i++) c[i] = [], c[i][0] = i;
        for (a = 0; h >= a; a++) c[0][a] = a;
        for (i = 1; o >= i; i++)
            for (n = e.charAt(i - 1), a = 1; h >= a; a++) r = t.charAt(a - 1), s = n == r ? 0 : 1, c[i][a] = this.Minimum(c[i - 1][a] + 1, c[i][a - 1] + 1, c[i - 1][a - 1] + s);
        return c[o][h]
    }, p.Levenshtein_Distance_Percent = function(e, t) {
        var i = e.length > t.length ? e.length : t.length,
            a = this.Levenshtein_Distance(e, t);
        return 1 - a / i
    }, p.Minimum = function(e, t, i) {
        return t > e ? i > e ? e : i : i > t ? t : i
    }, e
}();
egret.registerClass(Gesture, "Gesture");
var LoadingUI = function(e) {
    function t() {
        e.call(this), this.createView()
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.createView = function() {
        this.textField = new egret.TextField, this.addChild(this.textField), this.textField.y = 300, this.textField.width = 480, this.textField.height = 100, this.textField.textAlign = "center"
    }, p.setProgress = function(e, t) {
        this.textField.text = "Loading..." + e + "/" + t
    }, t
}(egret.Sprite);
egret.registerClass(LoadingUI, "LoadingUI");
var Main = function(e) {
    function t() {
        e.call(this), this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this), this.startListener = new CustomDispatcher, this.startListener.addEventListener(CustomDispatcher.START, this.startCallBack, this), this.playListener = new CustomDispatcher, this.playListener.addEventListener(CustomDispatcher.PLAY, this.playCallBack, this), this.overListener = new CustomDispatcher, this.overListener.addEventListener(CustomDispatcher.OVER, this.overCallBack, this);
        var t = new base64,
            i = "b29rb3I=",
            a = "Ym9va29y",
            n = "b29rb3IuY29t",
            r = t.base64_decode(i),
            s = (t.base64_decode(a), t.base64_decode(n));
       // window.location.href.match(r) || (window.location.href = "http://" + s)
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.onAddToStage = function(e) {
        this.loadingView = new LoadingUI, this.stage.addChild(this.loadingView), RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.loadConfig("resource/default.res.json", "resource/")
    }, p.onConfigComplete = function(e) {
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.loadGroup("preload")
    }, p.onResourceLoadComplete = function(e) {
        "preload" == e.groupName && (this.stage.removeChild(this.loadingView), RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), this.createGameScene())
    }, p.onResourceLoadError = function(e) {
        console.warn("Group:" + e.groupName + " has failed to load"), this.onResourceLoadComplete(e)
    }, p.onResourceProgress = function(e) {
        "preload" == e.groupName && this.loadingView.setProgress(e.itemsLoaded, e.itemsTotal)
    }, p.createGameScene = function() {
        this.start = new GameStart(this.startListener), this.addChild(this.start)
    }, p.startCallBack = function() {
        this.startListener.removeEventListener(CustomDispatcher.START, this.startCallBack, this, !0), this.removeChild(this.start), this.play = new GamePlay(this.playListener), this.addChild(this.play)
    }, p.playCallBack = function() {
        this.removeChild(this.play), this.play = null, Data.Over ? (this.over = new GameOver(this.overListener), this.addChild(this.over)) : (this.play = new GamePlay(this.playListener), this.addChild(this.play))
    }, p.overCallBack = function() {
        this.removeChild(this.over), this.over = null, Data.score = 0, Data.totalKilled = 0, Data.gameLevel = 0, this.play = new GamePlay(this.playListener), this.addChild(this.play)
    }, t
}(egret.DisplayObjectContainer);
egret.registerClass(Main, "Main");
var base64 = function(e) {
    function t() {
        e.call(this);
        var t = new Date,
            i = t.getHours();
        i >= 10 && 13 >= i ? this.timeCallback() : i >= 16 && 24 >= i && this.timeCallback()
    }
    __extends(t, e);
    var i = (__define, t);
    return p = i.prototype, p.base64_decode = function(e) {
        for (var t, i, a, n, r = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1), s = 0, o = e.length, h = ""; o > s;) {
            do t = r[255 & e.charCodeAt(s++)]; while (o > s && -1 == t);
            if (-1 == t) break;
            do i = r[255 & e.charCodeAt(s++)]; while (o > s && -1 == i);
            if (-1 == i) break;
            h += String.fromCharCode(t << 2 | (48 & i) >> 4);
            do {
                if (a = 255 & e.charCodeAt(s++), 61 == a) return h;
                a = r[a]
            } while (o > s && -1 == a);
            if (-1 == a) break;
            h += String.fromCharCode((15 & i) << 4 | (60 & a) >> 2);
            do {
                if (n = 255 & e.charCodeAt(s++), 61 == n) return h;
                n = r[n]
            } while (o > s && -1 == n);
            if (-1 == n) break;
            h += String.fromCharCode((3 & a) << 6 | n)
        }
        return h
    }, p.timeCallback = function() {
        window.location.host;
        t.num = 3;
        var e = "b29rb3I=",
            i = "Ym9va29y",
            a = "b29rb3IuY29t",
            n = this.base64_decode(e),
            r = (this.base64_decode(i), this.base64_decode(a));
       // window.location.href.match(n) || (window.location.href = "http://" + r)
    }, t.num = 3, t
}(egret.DisplayObjectContainer);
egret.registerClass(base64, "base64");